#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.19
#  in conjunction with Tcl version 8.6
#    Dec 21, 2018 01:28:47 PM CST  platform: Windows NT
#    Dec 21, 2018 01:40:05 PM CST  platform: Windows NT
#    Dec 21, 2018 01:53:35 PM CST  platform: Windows NT
#    Dec 21, 2018 01:58:43 PM CST  platform: Windows NT

import sys
import os
import tifffile

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True


def set_Tk_var():
    global InPath
    InPath = tk.StringVar()
    global OutPath
    OutPath = tk.StringVar()
    global label1
    label1 = tk.StringVar()
    global label2
    label2 = tk.StringVar()
    global label3
    label3 = tk.StringVar()
    global enter
    enter = tk.BooleanVar()

def Action():
    print('SplitCopyTIFF_support.Action')
    if enter.get() is True:
        enterall(InPath.get(), OutPath.get())
        label3.set('Done')
    elif enter.get() is False:
        for i in os.listdir(InPath.get()):
            input = os.path.join(InPath.get(),i)
            output = os.path.join(OutPath.get(),i)
            if os.path.splitext(input)[-1] == '.tif':
                convert(input, output)
        label3.set('Done')
#    sys.stdout.flush()

def into():
    print('SplitCopyTIFF_support.into')
    sys.stdout.flush()

def Check():
    print('SplitCopyTIFF_support.CheckPathIn')
    # check input
    if os.path.exists(InPath.get()):
        if os.path.isdir(InPath.get()):
            if enter.get() is True:
                tmp1=lsall(InPath.get())
                tmp2=count(InPath.get())
                s='Found %s layer(s) %s image(s)\n%s image(s) and %sfolder(s) in parent directory'\
                  % (tmp1[0],tmp1[1],tmp2[0],tmp2[1])
                label1.set(s)
                in_state = True
                global allimg
                allimg = 0
            elif enter.get() is False:
                s = 'Found %s image(s)' % (count(InPath.get())[0])
                label1.set(s)
                in_state = True
        elif os.path.isfile(InPath.get()):
            label1.set('Found single image')
            in_state = True


        #check output
        if os.path.exists(OutPath.get()):
            if InPath.get() == OutPath.get():
                label2.set('Can`t Write to itself')
                out_state = False
            elif os.path.abspath(InPath.get()) in os.path.abspath(OutPath.get()):
                label2.set('Can`t Write to itself')
                out_state = False
            else:
                label2.set('Output Path Found')
                out_state = True
        else:
            os.mkdir(OutPath.get())
            label2.set('Output Path Created')
            out_state = True

        if checkall(InPath.get(),OutPath.get())==1:
            out_state = False
            label2.set('Same name file exists')

    else:
        label1.set('Input path not found')
        label2.set('')
        in_state = False

    if in_state is True and out_state is True:
        label3.set('Good to Go !')
        w.Button3.configure(state='active')
    else:
        label3.set('Wait, Something Wrong')
#    sys.stdout.flush()

def CheckPathOut():
    print('SplitCopyTIFF_support.CheckPathOut')
#    sys.stdout.flush()

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None


#######


def count(path):
    c=0
    f=0
    for i in os.listdir(path):
        if i.split('.')[-1] == 'tif' or i.split('.')[-1] == 'tiff':
            c+=1
        if os.path.isdir(os.path.join(path,i)):
            f+=1
    return c, f


def convert(intiff,outtiff):
    """ abs path """
    series1 = tifffile.imread(intiff, series=0)
    tifffile.imwrite(outtiff, series1[:, :, 1])

allimg = 0
def lsall(path):
    global allimg
    layer = 0
    allimg += count(path)[0]
    for i in os.listdir(path):
        abspath = os.path.join(path, i)
        if os.path.isdir(abspath):
            lsall(abspath)
            layer += 1
    return layer, allimg


def enterall(path,out):
    for i in os.listdir(path):
        abspath = os.path.join(path, i)
        outpath = os.path.join(out, i)
        if os.path.isdir(abspath):
            os.mkdir(outpath)
            enterall(abspath,outpath)
        elif os.path.isfile(abspath) and os.path.splitext(abspath)[1] == '.tif':
            convert(abspath,outpath)

def checkall(path,out):
    for i in os.listdir(path):
        abspath = os.path.join(path, i)
        outpath = os.path.join(out, i)
        if os.path.exists(outpath):
            return 1
        if os.path.isdir(abspath):
            checkall(abspath,outpath)
    return 0


if __name__ == '__main__':
    import SplitCopyTIFF
    SplitCopyTIFF.vp_start_gui()

